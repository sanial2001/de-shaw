Given an array of N integers, find the maximum product of a subsequence and note the indexes which u consider for making the subsequence (i,j),their product should be perfect square.Also the array is 1 indexed.

static boolean[] ok = new boolean[200002];
    static boolean[] sq = new boolean[200002];
    private static long solve(int[] A){
        if (!ok[1]){ // let's compute this once for all testcases.
            Arrays.fill(ok, true);
            sq[1]=true;
            for (int i = 2; i*i <= 200001; i++){
                if (ok[i*i]){
                    sq[i*i] = true;
                    for (int j = i*i; j <= 200001; j += i*i){
                        ok[j] = false; // this can NOT be a valid start
                    }
                }
            }
        }
        long odd = 0;  // max product with at least an index with an odd number of primes
        long even = 1; // max product with all perfect squares
        for (int i = 0; i < A.length; i++){
            long cur = A[i];
            if (ok[i+1]){ // this is a valid start
                for (int j = 2; 1L*(i+1)*j*j <= A.length; j++){
                    cur *= A[(i+1)*j*j-1];
                }
            }
            odd = Math.max(odd, cur);
            if (sq[i+1]){ // perfect square
                even *= A[i];
            }
        }
        return Math.max(odd, even);
    }
